#Importing libraries
import pandas
from pandas.tools.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection

#Loading dataset
url="https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
names=['sepal-length', 'sepal-width', 'petal-lenth', 'petal-width', 'class']
dataset=pandas.read_csv(url, names=names)

##Summarise the dataset
#Describe the dataset 
print(dataset.shape())
#Peek at the dataset
print(dataset.head(5))
#Statistical Summary of the dataset
print(dataset.descibe())
#Class Distribution
print(dataset.count('class').size())

##Data Visualisation
#Univariate plots (These plots help us in understanding each attribute individually)
dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
plt.show()
#Histogram
dataset.hist()
plt.show()
#Multivariate Plots (These plots help us the understand the relation between attributes)
#Scatter Matrix
scatter_matrix(dataset)
plt.show()


#Creating a validation dataset
#We will split the loaded dataset into two, 80% of which we will use to train our models and 20% that we will hold back as #a validation dataset. we are going to hold back some data that the algorithms will not get to see and we will use this #data to get a second and independent idea of how accurate the best model might actually be.
array=dataset.values
X=array[:,0:4]
Y=array[:,4]
validation_size=0.2
seed=7
x_train, X_validation, Y_train, Y_validation=model_selection.train_test_split(X,Y, test_size=validation_size, random_state=seed)

#Spot Check Algorithms
models = []
models.append(('LR', LogisticRegression()))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC()))
#Evaluate each model in turn
results = []
names = []
for name, model in models:
	kfold = model_selection.KFold(n_splits=10, random_state=seed)
	cv_results = model_selection.cross_val_score(model, X_train, Y_train, cv=kfold, scoring=scoring)
	results.append(cv_results)
	names.append(name)
	msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
	print(msg)